@* Define route for project name *@
@page "/project/{ProjectName}"
@page "/project"
@using Portfolio.ViewModels
@inject IResumeViewModel _resumeViewModel

<PageTitle>Project</PageTitle>

<div class="about">
  @if (_resumeViewModel != null)
  {
  <h2>About @_resumeViewModel.Name</h2>
    <p>@_resumeViewModel?.About</p>
  }
</div>

<div class="project">
  @if (_resumeViewModel != null)
  {
    @* Console.WriteLine(@project?.Title); *@
    <h2>@project?.Title</h2>
    <p>@project?.Description</p>
    List<string> keyWords = project?.KeyWords?.Split(',').ToList() ?? new List<string>();
    // Apply left strip to all keyWords
    keyWords = keyWords.Select(keyWord => keyWord.TrimStart()).ToList();
    <h4>Keywords:</h4>
    @foreach (var keyWord in keyWords)
    {
      <span class="badge btn-primary mx-1">@keyWord</span>
    }
    @if (!string.IsNullOrEmpty(project?.RepoUrl))
    {
      <div class="my-4"><a href='@project?.RepoUrl' target="_blank"><img alt='GitHub' src='https://img.shields.io/badge/Get_code on GitHub-100000?style=for-the-badge&logo=GitHub&logoColor=white&labelColor=black&color=black'/></a></div>
    }
    
    <div class="iframe-container">
        <iframe src="@project?.Url" class="custom-iframe"></iframe>
    </div>

  }
</div>


@code {
    [Parameter]
    public string ProjectName { get; set; } = "";
    public ProjectModel? project { get; set; }
    protected override async Task OnInitializedAsync()
    {
        project = await _resumeViewModel.GetProject(ProjectName);
    }
}