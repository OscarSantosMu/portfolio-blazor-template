@page "/projects"
@using Portfolio.ViewModels
@inject IResumeViewModel _resumeViewModel

<PageTitle>Projects</PageTitle>

<div class="about">
  @if (_resumeViewModel != null)
  {
  <h2>About @_resumeViewModel.Name</h2>
    <p>@_resumeViewModel?.About</p>
  }
</div>

<div class="projects">
    <h2>Projects</h2>
    
    <h4>Filter by</h4>
      <EditForm Model="@_resumeViewModel.keyWords" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row">
            <div class="col">
                <div class="form-group">
                    <label for="domain">Domain</label>
                    <InputSelect id="domain" class="form-control-dropdown-filter" @bind-Value="@_resumeViewModel.keyWords.selectedDomain">
                        <option value="">All</option>
                        @foreach (var domain in domains)
                        {
                            <option value="@domain">@domain</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="col">
                <div class="form-group">
                    <label for="condition">and/or</label>
                    <InputSelect id="condition" class="form-control-dropdown-filter" @bind-Value="@_resumeViewModel.keyWords.condition">
                        <option value="and">and</option>
                        <option value="or">or</option>
                    </InputSelect>
                </div>
            </div>
            <div class="col">
                <div class="form-group">
                    <label for="techStack">Tech Stack</label>
                    <InputSelect id="techStack" class="form-control-dropdown-filter" @bind-Value="@_resumeViewModel.keyWords.selectedTechStack">
                        <option value="">All</option>
                        @foreach (var techStack in techStacks)
                        {
                            <option value="@techStack">@techStack</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="col">
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
        </div>
        </EditForm>

    <div class="row row-cols-1 row-cols-md-3 g-4 mt-1">

    @if (_resumeViewModel != null && _resumeViewModel.Projects != null)
    {
      foreach (var projectModel in filteredProjects)
      {
        <ProjectCard data=@projectModel></ProjectCard>
      }
    }
    else
    {
      <div class="alert alert-warning" role="alert">
        <h4 class="alert-heading">Content Not Found</h4>
        <p>Sorry, we could not load this section due to an error or unexisting content.</p>
      </div>
    }
    </div>
</div>

@code {
    private List<ProjectModel> filteredProjects = new List<ProjectModel>();
    private string condition { get; set; } = "or";
    private string selectedDomain { get; set; } = "";
    private string selectedTechStack { get; set; } = "";
    List<string> domains = new List<string> { "AI", "IoT", "Web", "Robotics", "Cloud", "Data Science", "DevOps" };
    List<string> techStacks = new List<string> { "Python", "C#", "C++", "Bash", ".NET", "Blazor", "Flask", "TensorFlow", "Folium", "MicroPython", "Microsoft Azure", "DigitalOcean", "Terraform", "Matplotlib", "OpenGL" , "Windows Forms", "Docker", "GitHub Actions", "Prometheus", "Grafana" };

    protected override async Task OnInitializedAsync()
    {
        await _resumeViewModel.GetProjects();
        filteredProjects = _resumeViewModel.FilterProjects(selectedDomain, selectedTechStack, condition);
    }

    private void HandleValidSubmit()
    {
        // Do something with the selected values
        Console.WriteLine($"Selected condition: {_resumeViewModel.keyWords.condition}");
        Console.WriteLine($"Selected domain: {_resumeViewModel.keyWords.selectedDomain}");
        Console.WriteLine($"Selected tech stack: {_resumeViewModel.keyWords.selectedTechStack}");
        condition = _resumeViewModel.keyWords?.condition ?? "and";
        selectedDomain = _resumeViewModel.keyWords?.selectedDomain ?? "";
        selectedTechStack = _resumeViewModel.keyWords?.selectedTechStack ?? "";
        // Update the filtered projects based on the new filter values
        filteredProjects = _resumeViewModel.FilterProjects(selectedDomain, selectedTechStack, condition);
        Console.WriteLine($"Condition: {condition}");
    }
}